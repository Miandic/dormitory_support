from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards import *
from bot_i import bot, admins

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder

class Form(StatesGroup):
    category = State()
    question = State()

start_router = Router()


start_text = '–ü—Ä–∏–≤–µ—Ç!\n\n–Ø —á–∞—Ç-–±–æ—Ç, –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏—Ö –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏.\n\n–í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏—é ü§î:'

@start_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(start_text, reply_markup=start_kb(message.from_user.id))


@start_router.callback_query(F.data == 'Home')
async def cmd_start(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text(start_text, reply_markup=start_kb(call.from_user.id))


@start_router.callback_query(F.data.startswith('category_'))
async def show_team(call: CallbackQuery, state: FSMContext):
    category = call.data.replace('category_', '')
    formatted_message = '–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: '

    await state.set_state(Form.category)
    
    if category == 'social':
        formatted_message += '—Å–æ—Ü–∏–ª—å–Ω–∞—èüë®‚Äçüë©‚Äçüëß'
        await state.update_data(category='—Å–æ—Ü–∏–ª—å–Ω–∞—è')
    if category == 'household':
        formatted_message += '–±—ã—Ç–æ–≤–∞—èüéÆ'
        await state.update_data(category='–±—ã—Ç–æ–≤–∞—èüéÆ')
    if category == 'conflict':
        formatted_message += '–∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—èüò°'
        await state.update_data(category='–∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è')
    if category == 'corruption':
        formatted_message += '–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ –º–µ–±–µ–ª–∏/–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—èüèö'
        await state.update_data(category='–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ –º–µ–±–µ–ª–∏/–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è')
    if category == 'other':
        formatted_message += '–ø—Ä–æ—á–µ–µü§∑‚Äç‚ôÇÔ∏è'
        await state.update_data(category='–ø—Ä–æ—á–µ–µü§∑‚Äç‚ôÇÔ∏è')

    await state.set_state(Form.question)

    formatted_message += '\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ:'
    #link = call.message.chat.id
    #formatted_message += '\n\ntg://openmessage?user_id=' + str(link)
    await call.message.edit_text(formatted_message, reply_markup=change_kb(call.from_user.id))


@start_router.message(Form.question)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    categoty = await state.get_data()
    reply_text = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ' + categoty.get("category") +  '\n\n–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:\n' + message.text
    link='tg://openmessage?user_id=' + str(message.from_user.id)

    for id in admins:
        await bot.send_message(id, reply_text, reply_markup=link_kb(link))

    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –µ—â—ë, –≤–µ—Ä–Ω–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é /start', reply_markup=change_kb(message.from_user.id))
    await state.clear()


@start_router.callback_query(F.data == 'Admin')
async def admin(call: CallbackQuery):
    await call.message.edit_text('–Ø –ø–æ–ª—É—á–∏–ª –≤–ª–∞—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –∏ –Ω–µ —Å–Ω–∏–ª–∞—Å—å –º–æ–µ–º—É –æ—Ç—Ü—É!', reply_markup=admin_kb())
